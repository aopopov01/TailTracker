openapi: 3.0.3
info:
  title: TailTracker Pet Wellness & Care Management API
  description: |
    Comprehensive pet wellness platform providing health tracking, care coordination, and family collaboration.
    
    **Key Features:**
    - Pet health metrics and medical records management
    - Family-based care task coordination
    - Real-time notifications and wellness insights
    - Emergency health protocols
    - Veterinary integration support
    - HIPAA-compliant data handling
    
    **Note:** GPS tracking has been completely removed. This API focuses exclusively on wellness and care management.
  version: 2.0.0-wellness
  contact:
    name: TailTracker Wellness Platform
    email: support@tailtracker.app
    url: https://tailtracker.app
  license:
    name: Proprietary
    url: https://tailtracker.app/license

servers:
  - url: https://api.tailtracker.app/v2
    description: Production API
  - url: https://staging-api.tailtracker.app/v2
    description: Staging API
  - url: http://localhost:54321/functions/v1
    description: Local Development (Supabase Edge Functions)

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Families
    description: Family/household management and member coordination
  - name: Pets
    description: Pet profile management and basic information
  - name: Health
    description: Health metrics, medical records, and wellness tracking
  - name: Care Tasks
    description: Task management and care coordination
  - name: Notifications
    description: Real-time notifications and communication
  - name: Analytics
    description: Wellness insights and health analytics
  - name: Emergency
    description: Emergency protocols and incident management
  - name: Files
    description: Document and photo management
  - name: Veterinary
    description: Veterinarian information and integration

paths:
  # ================================================================================================
  # AUTHENTICATION ENDPOINTS
  # ================================================================================================
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  expires_in:
                    type: integer
                  user:
                    $ref: '#/components/schemas/User'

  /auth/register:
    post:
      tags: [Authentication]
      summary: User registration
      description: Create new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, full_name]
              properties:
                email:
                  type: string
                  format: email
                full_name:
                  type: string
                  minLength: 2
                  maxLength: 255
                password:
                  type: string
                  format: password
                  minLength: 8
                phone:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}$'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful. Please verify your email."

  # ================================================================================================
  # FAMILY MANAGEMENT ENDPOINTS
  # ================================================================================================
  /families:
    get:
      tags: [Families]
      summary: Get user's families
      description: Retrieve all families the user is a member of
      responses:
        '200':
          description: Families retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Family'

    post:
      tags: [Families]
      summary: Create new family
      description: Create a new family/household
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  example: "The Johnson Family"
                description:
                  type: string
                  maxLength: 1000
                timezone:
                  type: string
                  example: "America/New_York"
                preferred_units:
                  type: string
                  enum: [metric, imperial]
                  default: metric
      responses:
        '201':
          description: Family created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'

  /families/{family_id}/members:
    get:
      tags: [Families]
      summary: Get family members
      parameters:
        - $ref: '#/components/parameters/FamilyId'
      responses:
        '200':
          description: Family members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyMember'

    post:
      tags: [Families]
      summary: Invite family member
      description: Invite a user to join the family
      parameters:
        - $ref: '#/components/parameters/FamilyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, role]
              properties:
                email:
                  type: string
                  format: email
                role:
                  $ref: '#/components/schemas/UserRole'
                permissions:
                  type: object
                  properties:
                    can_manage_pets:
                      type: boolean
                      default: true
                    can_manage_health_records:
                      type: boolean
                      default: true
                    can_assign_tasks:
                      type: boolean
                      default: false
      responses:
        '201':
          description: Invitation sent successfully

  # ================================================================================================
  # PET MANAGEMENT ENDPOINTS
  # ================================================================================================
  /pets:
    get:
      tags: [Pets]
      summary: Get user's pets
      description: Retrieve all pets the user has access to
      parameters:
        - name: family_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter pets by family
      responses:
        '200':
          description: Pets retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'

    post:
      tags: [Pets]
      summary: Create new pet profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePetRequest'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  /pets/{pet_id}:
    get:
      tags: [Pets]
      summary: Get pet details
      parameters:
        - $ref: '#/components/parameters/PetId'
      responses:
        '200':
          description: Pet details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

    put:
      tags: [Pets]
      summary: Update pet profile
      parameters:
        - $ref: '#/components/parameters/PetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePetRequest'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  # ================================================================================================
  # HEALTH MANAGEMENT ENDPOINTS
  # ================================================================================================
  /pets/{pet_id}/health/metrics:
    get:
      tags: [Health]
      summary: Get pet health metrics
      parameters:
        - $ref: '#/components/parameters/PetId'
        - name: metric_type
          in: query
          schema:
            $ref: '#/components/schemas/HealthMetricType'
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Health metrics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthMetric'

    post:
      tags: [Health]
      summary: Record health metric
      parameters:
        - $ref: '#/components/parameters/PetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHealthMetricRequest'
      responses:
        '201':
          description: Health metric recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthMetric'

  /pets/{pet_id}/health/medical-records:
    get:
      tags: [Health]
      summary: Get medical records
      parameters:
        - $ref: '#/components/parameters/PetId'
        - name: record_type
          in: query
          schema:
            type: string
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: Medical records retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalRecord'

    post:
      tags: [Health]
      summary: Create medical record
      parameters:
        - $ref: '#/components/parameters/PetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMedicalRecordRequest'
      responses:
        '201':
          description: Medical record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'

  # ================================================================================================
  # CARE TASK MANAGEMENT ENDPOINTS
  # ================================================================================================
  /care-tasks:
    get:
      tags: [Care Tasks]
      summary: Get care tasks
      parameters:
        - name: family_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter tasks by family
        - name: pet_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter tasks by pet
        - name: assigned_to
          in: query
          schema:
            type: string
            format: uuid
          description: Filter tasks by assignee
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/CareTaskStatus'
        - name: due_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Care tasks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CareTask'

    post:
      tags: [Care Tasks]
      summary: Create care task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCareTaskRequest'
      responses:
        '201':
          description: Care task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareTask'

  /care-tasks/{task_id}:
    get:
      tags: [Care Tasks]
      summary: Get care task details
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Care task details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareTask'

    put:
      tags: [Care Tasks]
      summary: Update care task
      parameters:
        - name: task_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCareTaskRequest'
      responses:
        '200':
          description: Care task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareTask'

  # ================================================================================================
  # ANALYTICS AND INSIGHTS ENDPOINTS
  # ================================================================================================
  /analytics/wellness:
    post:
      tags: [Analytics]
      summary: Generate wellness analytics
      description: Generate comprehensive wellness insights and analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [analysis_type]
              properties:
                pet_id:
                  type: string
                  format: uuid
                family_id:
                  type: string
                  format: uuid
                analysis_type:
                  type: string
                  enum: [health_trends, behavioral_patterns, care_insights, wellness_score, preventive_care]
                time_period:
                  type: string
                  enum: [week, month, quarter, year]
                  default: month
                include_predictions:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Analytics generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WellnessAnalytics'

  # ================================================================================================
  # EMERGENCY PROTOCOLS ENDPOINTS
  # ================================================================================================
  /emergency/protocols:
    post:
      tags: [Emergency]
      summary: Activate emergency protocol
      description: Activate emergency response protocol for a pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [pet_id, emergency_type, severity]
              properties:
                pet_id:
                  type: string
                  format: uuid
                emergency_type:
                  type: string
                  enum: [health_crisis, injury, poisoning, seizure, breathing_difficulty, trauma, other]
                severity:
                  type: string
                  enum: [low, medium, high, critical]
                symptoms:
                  type: array
                  items:
                    type: string
                immediate_action_taken:
                  type: string
                location:
                  type: string
                notify_family:
                  type: boolean
                  default: true
                notify_veterinarian:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Emergency protocol activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmergencyResponse'

# ================================================================================================
# COMPONENT SCHEMAS
# ================================================================================================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    FamilyId:
      name: family_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier for the family

    PetId:
      name: pet_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Unique identifier for the pet

  schemas:
    # ================================================================================================
    # CORE SCHEMAS
    # ================================================================================================
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        avatar_url:
          type: string
          format: uri
        phone:
          type: string
        timezone:
          type: string
        language:
          type: string
        subscription_status:
          $ref: '#/components/schemas/SubscriptionStatus'
        created_at:
          type: string
          format: date-time

    Family:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        owner_id:
          type: string
          format: uuid
        invite_code:
          type: string
        max_members:
          type: integer
        timezone:
          type: string
        preferred_units:
          type: string
          enum: [metric, imperial]
        care_notifications_enabled:
          type: boolean
        shared_calendar_enabled:
          type: boolean
        photo_sharing_enabled:
          type: boolean
        wellness_reports_enabled:
          type: boolean
        created_at:
          type: string
          format: date-time

    FamilyMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        family_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/UserRole'
        can_manage_pets:
          type: boolean
        can_manage_health_records:
          type: boolean
        can_assign_tasks:
          type: boolean
        can_manage_family:
          type: boolean
        can_view_analytics:
          type: boolean
        specialization:
          type: string
        joined_at:
          type: string
          format: date-time

    Pet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        family_id:
          type: string
          format: uuid
        name:
          type: string
        species:
          type: string
        breed:
          type: string
        mixed_breed_details:
          type: string
        color_markings:
          type: string
        gender:
          type: string
        date_of_birth:
          type: string
          format: date
        date_adopted:
          type: string
          format: date
        weight_kg:
          type: number
          format: decimal
        height_cm:
          type: number
          format: decimal
        microchip_number:
          type: string
        current_health_status:
          $ref: '#/components/schemas/HealthStatus'
        current_activity_level:
          $ref: '#/components/schemas/ActivityLevel'
        insurance_provider:
          type: string
        insurance_policy_number:
          type: string
        status:
          $ref: '#/components/schemas/PetStatus'
        profile_photo_url:
          type: string
          format: uri
        special_needs:
          type: string
        dietary_restrictions:
          type: string
        allergies:
          type: string
        behavioral_notes:
          type: string
        emergency_medical_notes:
          type: string
        created_at:
          type: string
          format: date-time

    # ================================================================================================
    # HEALTH SCHEMAS
    # ================================================================================================
    HealthMetric:
      type: object
      properties:
        id:
          type: string
          format: uuid
        pet_id:
          type: string
          format: uuid
        recorded_by:
          type: string
          format: uuid
        metric_type:
          $ref: '#/components/schemas/HealthMetricType'
        value:
          type: number
          format: decimal
        unit:
          type: string
        measurement_method:
          type: string
        notes:
          type: string
        is_estimated:
          type: boolean
        recorded_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    MedicalRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
        pet_id:
          type: string
          format: uuid
        veterinarian_id:
          type: string
          format: uuid
        record_type:
          type: string
        visit_type:
          type: string
        title:
          type: string
        chief_complaint:
          type: string
        symptoms:
          type: array
          items:
            type: string
        diagnosis:
          type: string
        treatment_plan:
          type: string
        follow_up_required:
          type: boolean
        follow_up_date:
          type: string
          format: date
        cost:
          type: number
          format: decimal
        currency:
          type: string
        document_urls:
          type: array
          items:
            type: string
            format: uri
        date_of_record:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    # ================================================================================================
    # CARE TASK SCHEMAS
    # ================================================================================================
    CareTask:
      type: object
      properties:
        id:
          type: string
          format: uuid
        family_id:
          type: string
          format: uuid
        pet_id:
          type: string
          format: uuid
        task_type:
          $ref: '#/components/schemas/CareTaskType'
        title:
          type: string
        description:
          type: string
        instructions:
          type: string
        assigned_to:
          type: string
          format: uuid
        assigned_by:
          type: string
          format: uuid
        priority:
          $ref: '#/components/schemas/CareTaskPriority'
        due_date:
          type: string
          format: date
        due_time:
          type: string
          format: time
        estimated_duration_minutes:
          type: integer
        is_recurring:
          type: boolean
        recurrence_pattern:
          type: string
        status:
          $ref: '#/components/schemas/CareTaskStatus'
        completed_at:
          type: string
          format: date-time
        completion_notes:
          type: string
        photo_urls:
          type: array
          items:
            type: string
            format: uri
        created_at:
          type: string
          format: date-time

    # ================================================================================================
    # ANALYTICS SCHEMAS
    # ================================================================================================
    WellnessAnalytics:
      type: object
      properties:
        success:
          type: boolean
        analysis_type:
          type: string
        time_period:
          type: string
        generated_at:
          type: string
          format: date-time
        data:
          type: object
          properties:
            overall_score:
              type: integer
              minimum: 0
              maximum: 100
            breakdown:
              type: object
            trends:
              type: array
              items:
                type: object
            recommendations:
              type: array
              items:
                type: string
            insights:
              type: array
              items:
                type: object

    EmergencyResponse:
      type: object
      properties:
        success:
          type: boolean
        incident_id:
          type: string
          format: uuid
        emergency_response:
          type: object
          properties:
            protocol_id:
              type: string
            emergency_level:
              type: string
            immediate_actions:
              type: array
              items:
                type: string
            warning_signs:
              type: array
              items:
                type: string
            when_to_call_vet:
              type: string
            emergency_contacts:
              type: object
            medical_history:
              type: object
            transport_instructions:
              type: array
              items:
                type: string
            estimated_response_time:
              type: string
        timestamp:
          type: string
          format: date-time

    # ================================================================================================
    # REQUEST SCHEMAS
    # ================================================================================================
    CreatePetRequest:
      type: object
      required: [family_id, name, species]
      properties:
        family_id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 255
        species:
          type: string
        breed:
          type: string
        gender:
          type: string
        date_of_birth:
          type: string
          format: date
        weight_kg:
          type: number
          format: decimal
        microchip_number:
          type: string
        allergies:
          type: string
        special_needs:
          type: string

    UpdatePetRequest:
      type: object
      properties:
        name:
          type: string
        weight_kg:
          type: number
          format: decimal
        current_health_status:
          $ref: '#/components/schemas/HealthStatus'
        current_activity_level:
          $ref: '#/components/schemas/ActivityLevel'
        allergies:
          type: string
        special_needs:
          type: string
        behavioral_notes:
          type: string

    CreateHealthMetricRequest:
      type: object
      required: [metric_type, value, unit, recorded_at]
      properties:
        metric_type:
          $ref: '#/components/schemas/HealthMetricType'
        value:
          type: number
          format: decimal
        unit:
          type: string
        measurement_method:
          type: string
        notes:
          type: string
        is_estimated:
          type: boolean
          default: false
        recorded_at:
          type: string
          format: date-time

    CreateMedicalRecordRequest:
      type: object
      required: [record_type, title, date_of_record]
      properties:
        veterinarian_id:
          type: string
          format: uuid
        record_type:
          type: string
        visit_type:
          type: string
        title:
          type: string
        chief_complaint:
          type: string
        diagnosis:
          type: string
        treatment_plan:
          type: string
        cost:
          type: number
          format: decimal
        date_of_record:
          type: string
          format: date-time

    CreateCareTaskRequest:
      type: object
      required: [family_id, task_type, title]
      properties:
        family_id:
          type: string
          format: uuid
        pet_id:
          type: string
          format: uuid
        task_type:
          $ref: '#/components/schemas/CareTaskType'
        title:
          type: string
        description:
          type: string
        instructions:
          type: string
        assigned_to:
          type: string
          format: uuid
        priority:
          $ref: '#/components/schemas/CareTaskPriority'
        due_date:
          type: string
          format: date
        due_time:
          type: string
          format: time
        is_recurring:
          type: boolean
          default: false

    UpdateCareTaskRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        assigned_to:
          type: string
          format: uuid
        priority:
          $ref: '#/components/schemas/CareTaskPriority'
        status:
          $ref: '#/components/schemas/CareTaskStatus'
        completion_notes:
          type: string

    # ================================================================================================
    # ENUM SCHEMAS
    # ================================================================================================
    UserRole:
      type: string
      enum: [owner, caregiver, viewer, veterinarian]

    SubscriptionStatus:
      type: string
      enum: [free, premium, family, cancelled, expired, past_due, unpaid]

    PetStatus:
      type: string
      enum: [active, inactive, deceased, adopted_out]

    HealthStatus:
      type: string
      enum: [excellent, good, fair, concerning, critical]

    ActivityLevel:
      type: string
      enum: [very_low, low, moderate, high, very_high]

    HealthMetricType:
      type: string
      enum: [weight, temperature, heart_rate, respiratory_rate, activity_minutes, sleep_hours, water_intake, food_intake]

    CareTaskType:
      type: string
      enum: [feeding, medication, exercise, grooming, vet_visit, training, custom]

    CareTaskPriority:
      type: string
      enum: [low, normal, high, urgent]

    CareTaskStatus:
      type: string
      enum: [pending, in_progress, completed, overdue, cancelled]

  # ================================================================================================
  # ERROR RESPONSES
  # ================================================================================================
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              details:
                type: object

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
              message:
                type: string
                example: "Invalid or missing authentication token"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Forbidden"
              message:
                type: string
                example: "Insufficient permissions to access this resource"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not Found"
              message:
                type: string
                example: "The requested resource was not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
              message:
                type: string
              timestamp:
                type: string
                format: date-time