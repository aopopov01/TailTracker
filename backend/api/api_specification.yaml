openapi: 3.0.3
info:
  title: TailTracker API
  version: 1.0.0
  description: |
    TailTracker backend API for pet management, health tracking, and family sharing.
    Designed for 150K+ users with 99.9% uptime and <1s response times.
  contact:
    name: TailTracker API Support
    email: api-support@tailtracker.com
  license:
    name: Proprietary
servers:
  - url: https://api.tailtracker.com/v1
    description: Production API
  - url: https://api-staging.tailtracker.com/v1
    description: Staging API

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid input parameters"
        details:
          type: object
        request_id:
          type: string
          format: uuid

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        avatar_url:
          type: string
          format: uri
        subscription_status:
          type: string
          enum: [free, premium, family, cancelled, expired]
        created_at:
          type: string
          format: date-time

    Family:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        owner_id:
          type: string
          format: uuid
        invite_code:
          type: string
        member_count:
          type: integer
        created_at:
          type: string
          format: date-time

    Pet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        family_id:
          type: string
          format: uuid
        name:
          type: string
        species:
          type: string
        breed:
          type: string
        color:
          type: string
        gender:
          type: string
        date_of_birth:
          type: string
          format: date
        weight_kg:
          type: number
        microchip_number:
          type: string
        profile_photo_url:
          type: string
          format: uri
        status:
          type: string
          enum: [active, deceased, lost, found]

    Vaccination:
      type: object
      properties:
        id:
          type: string
          format: uuid
        pet_id:
          type: string
          format: uuid
        vaccine_name:
          type: string
        administered_date:
          type: string
          format: date
        next_due_date:
          type: string
          format: date
        veterinarian_name:
          type: string
        certificate_url:
          type: string
          format: uri

    LostPet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        pet_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [lost, found]
        last_seen_location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        last_seen_address:
          type: string
        description:
          type: string
        reward_amount:
          type: number
        contact_phone:
          type: string
        photo_urls:
          type: array
          items:
            type: string
            format: uri

  parameters:
    PetId:
      name: pet_id
      in: path
      required: true
      schema:
        type: string
        format: uuid

    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    Offset:
      name: offset
      in: query
      schema:
        type: integer
        minimum: 0
        default: 0

paths:
  # Authentication endpoints
  /auth/signup:
    post:
      summary: User registration
      security: []
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, full_name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                full_name:
                  type: string
                gdpr_consent:
                  type: boolean
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
        '409':
          description: Email already exists

  /auth/login:
    post:
      summary: User authentication
      security: []
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  expires_in:
                    type: integer
                  user:
                    $ref: '#/components/schemas/User'

  # User management
  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    
    patch:
      summary: Update user profile
      tags: [Users]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                avatar_url:
                  type: string
                phone:
                  type: string
                timezone:
                  type: string
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  # Family management
  /families:
    get:
      summary: Get user's families
      tags: [Families]
      responses:
        '200':
          description: List of families
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Family'
    
    post:
      summary: Create new family
      tags: [Families]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Family created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Family'

  /families/{family_id}/invite:
    post:
      summary: Invite member to family
      tags: [Families]
      parameters:
        - name: family_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [member, viewer]
                  default: member
      responses:
        '200':
          description: Invitation sent

  # Pet management
  /pets:
    get:
      summary: Get user's pets
      tags: [Pets]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: family_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [active, deceased, lost, found]
      responses:
        '200':
          description: List of pets
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pet'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
    
    post:
      summary: Create new pet profile
      tags: [Pets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, species, family_id]
              properties:
                name:
                  type: string
                species:
                  type: string
                breed:
                  type: string
                family_id:
                  type: string
                  format: uuid
                date_of_birth:
                  type: string
                  format: date
                weight_kg:
                  type: number
                microchip_number:
                  type: string
      responses:
        '201':
          description: Pet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  /pets/{pet_id}:
    get:
      summary: Get pet details
      tags: [Pets]
      parameters:
        - $ref: '#/components/parameters/PetId'
      responses:
        '200':
          description: Pet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    
    patch:
      summary: Update pet profile
      tags: [Pets]
      parameters:
        - $ref: '#/components/parameters/PetId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                weight_kg:
                  type: number
                status:
                  type: string
                  enum: [active, deceased, lost, found]
      responses:
        '200':
          description: Pet updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  # Vaccination tracking
  /pets/{pet_id}/vaccinations:
    get:
      summary: Get pet vaccinations
      tags: [Vaccinations]
      parameters:
        - $ref: '#/components/parameters/PetId'
      responses:
        '200':
          description: List of vaccinations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vaccination'
    
    post:
      summary: Add vaccination record
      tags: [Vaccinations]
      parameters:
        - $ref: '#/components/parameters/PetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vaccine_name, administered_date]
              properties:
                vaccine_name:
                  type: string
                administered_date:
                  type: string
                  format: date
                next_due_date:
                  type: string
                  format: date
                veterinarian_id:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Vaccination added

  # Lost pet alerts
  /lost-pets:
    get:
      summary: Get lost pets in area
      tags: [Lost Pets]
      parameters:
        - name: latitude
          in: query
          required: true
          schema:
            type: number
        - name: longitude
          in: query
          required: true
          schema:
            type: number
        - name: radius_km
          in: query
          schema:
            type: number
            default: 10
      responses:
        '200':
          description: Lost pets in area
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LostPet'
    
    post:
      summary: Report lost pet
      tags: [Lost Pets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [pet_id, last_seen_location]
              properties:
                pet_id:
                  type: string
                  format: uuid
                last_seen_location:
                  type: object
                  properties:
                    latitude:
                      type: number
                    longitude:
                      type: number
                last_seen_address:
                  type: string
                description:
                  type: string
                reward_amount:
                  type: number
                contact_phone:
                  type: string
      responses:
        '201':
          description: Lost pet reported

  # File upload
  /upload:
    post:
      summary: Upload file
      tags: [Files]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [photo, document, certificate]
      responses:
        '200':
          description: File uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_id:
                    type: string
                    format: uuid
                  url:
                    type: string
                    format: uri

  # Health check
  /health:
    get:
      summary: API health check
      security: []
      tags: [System]
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                  database:
                    type: string
                    enum: [healthy, degraded, down]

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile management
  - name: Families
    description: Family and sharing management
  - name: Pets
    description: Pet profile management
  - name: Vaccinations
    description: Vaccination tracking
  - name: Lost Pets
    description: Lost pet reporting and alerts
  - name: Files
    description: File upload and management
  - name: System
    description: System status and monitoring