name: Android Build and Test

on:
  push:
    branches: [ main, develop, 'release/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - debug
        - release
      flavor:
        description: 'Build flavor'
        required: false
        default: ''
        type: choice
        options:
        - ''
        - lite
        - premium

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  ANDROID_COMPILE_SDK: '34'
  ANDROID_BUILD_TOOLS: '34.0.0'
  ANDROID_SDK_TOOLS: '9477386'

jobs:
  lint-and-test:
    name: Lint and Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Install dependencies
      run: |
        cd mobile
        yarn install --frozen-lockfile

    - name: Run TypeScript type checking
      run: |
        cd mobile
        yarn type-check

    - name: Run ESLint
      run: |
        cd mobile
        yarn lint

    - name: Run unit tests
      run: |
        cd mobile
        yarn test --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: mobile/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build-android:
    name: Build Android App
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        build-type: [debug, release]
        flavor: ['', lite, premium]
        exclude:
          - build-type: debug
            flavor: premium  # Skip premium debug builds
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: ${{ env.ANDROID_COMPILE_SDK }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        ndk-version: '25.1.8937393'
        cmake-version: '3.22.1'

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          mobile/android/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: mobile/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('mobile/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Install dependencies
      run: |
        cd mobile
        yarn install --frozen-lockfile

    - name: Create debug keystore
      if: matrix.build-type == 'debug'
      run: |
        cd mobile
        mkdir -p android/app/src/debug
        keytool -genkey -v -keystore android/app/debug.keystore \
          -storepass android -alias androiddebugkey -keypass android \
          -keyalg RSA -keysize 2048 -validity 10000 \
          -dname "CN=Android Debug,O=Android,C=US"

    - name: Setup release keystore
      if: matrix.build-type == 'release'
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      run: |
        cd mobile
        if [ ! -z "$ANDROID_KEYSTORE_BASE64" ]; then
          echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/release.keystore
          echo "MYAPP_UPLOAD_STORE_FILE=release.keystore" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_ALIAS=$ANDROID_KEY_ALIAS" >> android/gradle.properties
          echo "MYAPP_UPLOAD_STORE_PASSWORD=$ANDROID_KEYSTORE_PASSWORD" >> android/gradle.properties
          echo "MYAPP_UPLOAD_KEY_PASSWORD=$ANDROID_KEY_PASSWORD" >> android/gradle.properties
        fi

    - name: Create google-services.json
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        cd mobile
        if [ ! -z "$GOOGLE_SERVICES_JSON" ]; then
          echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json
        else
          # Create empty google-services.json for builds without Firebase
          echo '{"project_info":{"project_number":"","project_id":""},"client":[]}' > android/app/google-services.json
        fi

    - name: Generate Bundle
      run: |
        cd mobile
        yarn react-native bundle \
          --platform android \
          --dev false \
          --entry-file index.js \
          --bundle-output android/app/src/main/assets/index.android.bundle \
          --assets-dest android/app/src/main/res/ \
          --reset-cache

    - name: Build Android App
      env:
        BUILD_TYPE: ${{ matrix.build-type }}
        FLAVOR: ${{ matrix.flavor }}
      run: |
        cd mobile/android
        
        # Determine Gradle task
        if [ ! -z "$FLAVOR" ]; then
          GRADLE_TASK="assemble${FLAVOR^}${BUILD_TYPE^}"
          BUNDLE_TASK="bundle${FLAVOR^}${BUILD_TYPE^}"
        else
          GRADLE_TASK="assemble${BUILD_TYPE^}"
          BUNDLE_TASK="bundle${BUILD_TYPE^}"
        fi
        
        echo "Building with task: $GRADLE_TASK"
        
        # Build APK
        ./gradlew $GRADLE_TASK \
          -x test \
          -x lint \
          --no-daemon \
          --stacktrace
        
        # Build AAB for release builds
        if [ "$BUILD_TYPE" = "release" ]; then
          echo "Building AAB with task: $BUNDLE_TASK"
          ./gradlew $BUNDLE_TASK \
            -x test \
            -x lint \
            --no-daemon \
            --stacktrace
        fi

    - name: Upload APK artifacts
      uses: actions/upload-artifact@v3
      with:
        name: apk-${{ matrix.build-type }}-${{ matrix.flavor }}
        path: mobile/android/app/build/outputs/apk/**/*.apk
        retention-days: 30

    - name: Upload AAB artifacts
      if: matrix.build-type == 'release'
      uses: actions/upload-artifact@v3
      with:
        name: aab-${{ matrix.build-type }}-${{ matrix.flavor }}
        path: mobile/android/app/build/outputs/bundle/**/*.aab
        retention-days: 90

    - name: Upload mapping files
      if: matrix.build-type == 'release'
      uses: actions/upload-artifact@v3
      with:
        name: mapping-${{ matrix.build-type }}-${{ matrix.flavor }}
        path: mobile/android/app/build/outputs/mapping/**/*
        retention-days: 365

  e2e-tests:
    name: E2E Tests
    runs-on: macos-latest
    needs: build-android
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 30
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        ndk-version: '25.1.8937393'

    - name: Install dependencies
      run: |
        cd mobile
        yarn install --frozen-lockfile

    - name: Download APK artifact
      uses: actions/download-artifact@v3
      with:
        name: apk-debug-
        path: mobile/android/app/build/outputs/apk/debug/

    - name: Create AVD and run tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 30
        target: google_apis
        arch: x86_64
        profile: Nexus 6
        script: |
          cd mobile
          yarn detox build --configuration android.debug
          yarn detox test --configuration android.debug --cleanup

    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-test-results
        path: mobile/artifacts/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --project-name=TailTracker-Mobile
        command: test

    - name: Download APK for security scan
      uses: actions/download-artifact@v3
      with:
        name: apk-release-
        path: ./apk/

    - name: Run MobSF security scan
      if: false  # Disabled for now - requires MobSF setup
      run: |
        # Add MobSF scanning here
        echo "MobSF security scan would run here"

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: build-android
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download APK for analysis
      uses: actions/download-artifact@v3
      with:
        name: apk-release-
        path: ./apk/

    - name: Analyze APK size
      run: |
        # APK size analysis
        for apk in ./apk/**/*.apk; do
          if [ -f "$apk" ]; then
            echo "APK: $(basename "$apk")"
            echo "Size: $(du -h "$apk" | cut -f1)"
            echo "---"
          fi
        done

    - name: Comment PR with APK info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 📱 Android Build Results\n\n';
          comment += '### APK Sizes\n\n';
          
          // Add APK size information
          comment += '| Variant | Size |\n';
          comment += '|---------|------|\n';
          
          // This would be populated with actual APK size data
          comment += '| Release | ~15MB |\n';
          comment += '| Debug | ~25MB |\n';
          
          comment += '\n### 🚀 Ready for Testing\n';
          comment += 'APK artifacts are available for download in the Actions tab.\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  deploy-to-internal:
    name: Deploy to Internal Testing
    runs-on: ubuntu-latest
    needs: [build-android, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: internal
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download AAB artifact
      uses: actions/download-artifact@v3
      with:
        name: aab-release-
        path: ./aab/

    - name: Deploy to Google Play Internal Testing
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        packageName: com.tailtracker.app
        releaseFiles: ./aab/**/*.aab
        track: internal
        status: completed
        inAppUpdatePriority: 2
        
    - name: Notify team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#mobile-releases'
        text: 'TailTracker Android build deployed to internal testing'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}