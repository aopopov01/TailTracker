name: E2E Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '18'
  
jobs:
  # Android E2E Tests
  android-e2e:
    name: Android E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0

      - name: Install dependencies
        run: npm ci

      - name: Create Android AVD
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
            --name test_emulator \
            --package "system-images;android-34;google_apis;x86_64" \
            --device "Nexus_6P"

      - name: Start Android Emulator
        run: |
          $ANDROID_HOME/emulator/emulator -avd test_emulator -no-snapshot -no-window -no-boot-anim -no-audio &
          # Wait for emulator to be ready
          $ANDROID_HOME/platform-tools/adb wait-for-device
          until $ANDROID_HOME/platform-tools/adb shell getprop sys.boot_completed | grep -m 1 '1'; do
            echo "Waiting for emulator..."
            sleep 5
          done

      - name: Build Android app for testing
        run: npm run build:detox:android

      - name: Run Detox E2E tests
        run: npm run test:android
        env:
          DETOX_CONFIGURATION: android.emu.release

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-e2e-results
          path: |
            e2e/artifacts/**
            detox-results.json
          retention-days: 7

      - name: Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: android-e2e-screenshots
          path: e2e/artifacts/screenshots/**
          retention-days: 7

  # iOS E2E Tests
  ios-e2e:
    name: iOS E2E Tests
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 15.2

      - name: Install dependencies
        run: npm ci

      - name: Setup CocoaPods
        run: sudo gem install cocoapods

      - name: Install iOS dependencies
        run: |
          cd ios && pod install --repo-update
          cd ..

      - name: Create iOS Simulator
        run: |
          # List available simulators
          xcrun simctl list devicetypes
          xcrun simctl list runtimes
          
          # Create simulator
          DEVICE_ID=$(xcrun simctl create "TestiPhone" "iPhone 15 Pro" "iOS17.2")
          echo "DEVICE_ID=$DEVICE_ID" >> $GITHUB_ENV
          
          # Boot simulator
          xcrun simctl boot $DEVICE_ID

      - name: Build iOS app for testing
        run: npm run build:detox:ios

      - name: Run Detox E2E tests
        run: npm run test:ios
        env:
          DETOX_CONFIGURATION: ios.sim.release

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-e2e-results
          path: |
            e2e/artifacts/**
            detox-results.json
          retention-days: 7

      - name: Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-e2e-screenshots
          path: e2e/artifacts/screenshots/**
          retention-days: 7

      - name: Cleanup simulator
        if: always()
        run: |
          if [ -n "$DEVICE_ID" ]; then
            xcrun simctl shutdown $DEVICE_ID
            xcrun simctl delete $DEVICE_ID
          fi

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      # Mock backend service for testing
      mockserver:
        image: mockserver/mockserver:5.15.0
        ports:
          - 1080:1080
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup mock server expectations
        run: |
          curl -X PUT http://localhost:1080/mockserver/expectation \
            -H "Content-Type: application/json" \
            -d '{
              "httpRequest": {
                "method": "GET",
                "path": "/api/health"
              },
              "httpResponse": {
                "statusCode": 200,
                "body": {"status": "ok"}
              }
            }'

      - name: Run integration tests
        run: npm run test:integration
        env:
          API_BASE_URL: http://localhost:1080/api
          CI: true

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: coverage/integration/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run bundle analyzer
        run: |
          npm run build:analyze
          # Generate bundle size report
          npx bundlewatch --config bundlewatch.config.js

      - name: Run performance benchmarks
        run: npm run test:performance
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-report.json
            bundle-analyzer-report.html
          retention-days: 7

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:accessibility
        continue-on-error: true

      - name: Generate accessibility report
        run: |
          npx @axe-core/cli --dir src/ --include "*.tsx" --include "*.jsx" \
            --output accessibility-report.json --reporter json

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: accessibility-report.json
          retention-days: 7

  # Test Result Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [android-e2e, ios-e2e, integration-tests, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Android E2E: ${{ needs.android-e2e.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- iOS E2E: ${{ needs.ios-e2e.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any critical tests failed
          if [[ "${{ needs.android-e2e.result }}" == "failure" ]] || [[ "${{ needs.ios-e2e.result }}" == "failure" ]] || [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "❌ Critical tests failed! Please review the results." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All critical tests passed!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify test completion
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#mobile-testing",
              "text": "TailTracker E2E Test Summary",
              "attachments": [
                {
                  "color": "${{ needs.android-e2e.result == 'success' && needs.ios-e2e.result == 'success' && needs.integration-tests.result == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Android E2E",
                      "value": "${{ needs.android-e2e.result }}",
                      "short": true
                    },
                    {
                      "title": "iOS E2E",
                      "value": "${{ needs.ios-e2e.result }}",
                      "short": true
                    },
                    {
                      "title": "Integration",
                      "value": "${{ needs.integration-tests.result }}",
                      "short": true
                    },
                    {
                      "title": "Performance",
                      "value": "${{ needs.performance-tests.result }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}