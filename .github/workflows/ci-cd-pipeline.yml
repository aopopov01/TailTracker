# TailTracker CI/CD Pipeline
# Comprehensive deployment strategy with multi-environment support
# Supports mobile app builds, API deployment, and infrastructure management

name: TailTracker CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  DOCKER_REGISTRY: 'tailtracker.azurecr.io'
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  # Code Quality and Security Scanning
  quality-gates:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.quality-check.outputs.passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Run ESLint
        working-directory: ./mobile
        run: npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Run TypeScript check
        working-directory: ./mobile
        run: npx tsc --noEmit

      - name: Run unit tests
        working-directory: ./mobile
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Security audit
        working-directory: ./mobile
        run: npm audit --audit-level moderate

      - name: SAST Security Scan
        uses: securecodewarrior/github-action-add-sarif@v1
        if: github.event_name == 'push'
        with:
          sarif-file: 'security-scan.sarif'

      - name: Quality gate check
        id: quality-check
        run: |
          echo "passed=true" >> $GITHUB_OUTPUT

  # Mobile App Build and Test
  mobile-build:
    name: Mobile App Build & Test
    runs-on: ${{ matrix.os }}
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: android
          - os: macos-latest
            platform: ios
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Run E2E tests (Android)
        if: matrix.platform == 'android'
        working-directory: ./mobile
        run: |
          npm run test:e2e:android:ci

      - name: Setup Java for Android
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v2

      - name: Setup Xcode for iOS
        if: matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build mobile app (Development)
        if: github.ref == 'refs/heads/develop'
        working-directory: ./mobile
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          eas build --platform ${{ matrix.platform }} --profile development --non-interactive

      - name: Build mobile app (Production)
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: ./mobile
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          eas build --platform ${{ matrix.platform }} --profile production --non-interactive

  # API and Backend Testing
  backend-test:
    name: Backend API Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tailtracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tailtracker_test
        run: |
          cd backend
          python manage.py migrate

      - name: Run API tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tailtracker_test
          REDIS_URL: redis://localhost:6379
        run: |
          cd backend
          pytest tests/ --cov=. --cov-report=xml

      - name: Upload API coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: api
          name: codecov-api

  # Performance and Load Testing
  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [quality-gates, backend-test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance/results/

  # Security and Vulnerability Scanning
  security-scan:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'TailTracker'
          path: '.'
          format: 'HTML'

  # Infrastructure Deployment
  infrastructure-deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [quality-gates, backend-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform init
        working-directory: ./infrastructure/terraform
        run: terraform init

      - name: Terraform plan
        working-directory: ./infrastructure/terraform
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: terraform plan -out=tfplan

      - name: Terraform apply
        if: github.event_name == 'push'
        working-directory: ./infrastructure/terraform
        run: terraform apply -auto-approve tfplan

  # API Deployment
  api-deploy:
    name: Deploy API Services
    runs-on: ubuntu-latest
    needs: [infrastructure-deploy, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tailtracker-api
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          docker build \
            --build-arg ENVIRONMENT=$ENVIRONMENT \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest-$ENVIRONMENT \
            ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest-$ENVIRONMENT

      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          aws eks update-kubeconfig --region us-east-1 --name tailtracker-$ENVIRONMENT
          kubectl set image deployment/tailtracker-api tailtracker-api=${{ steps.login-ecr.outputs.registry }}/tailtracker-api:$IMAGE_TAG
          kubectl rollout status deployment/tailtracker-api --timeout=600s

  # Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [infrastructure-deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
        run: |
          cd backend
          python manage.py migrate

  # Mobile App Store Deployment
  mobile-deploy:
    name: Deploy Mobile Apps
    runs-on: ubuntu-latest
    needs: [mobile-build, api-deploy]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        platform: [android, ios]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Submit to App Store
        working-directory: ./mobile
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          eas submit --platform ${{ matrix.platform }} --profile production --non-interactive

  # Post-Deployment Testing
  post-deployment-test:
    name: Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: [api-deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run health checks
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_API_URL || secrets.STAGING_API_URL }}
        run: |
          ./scripts/health-check.sh $API_URL

      - name: Run smoke tests
        env:
          API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_API_URL || secrets.STAGING_API_URL }}
        run: |
          ./tests/smoke-tests.sh $API_URL

      - name: Monitor deployment metrics
        run: |
          ./scripts/monitor-deployment.sh

  # Notification and Reporting
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [mobile-deploy, post-deployment-test]
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.mobile-deploy.result == 'success' && needs.post-deployment-test.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            ✅ TailTracker deployment successful!
            • Version: ${{ github.ref }}
            • Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            • Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ❌ TailTracker deployment failed!
            • Version: ${{ github.ref }}
            • Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            • Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment report
        run: |
          echo "# Deployment Report - $(date)" > deployment-report.md
          echo "## Status: ${{ job.status }}" >> deployment-report.md
          echo "## Version: ${{ github.ref }}" >> deployment-report.md
          echo "## Commit: ${{ github.sha }}" >> deployment-report.md
          echo "## Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md