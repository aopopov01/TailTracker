# TailTracker Grafana Deployment
# Production-ready Grafana setup with persistent storage and custom dashboards

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
    spec:
      serviceAccountName: grafana
      securityContext:
        fsGroup: 472
        runAsUser: 472
        runAsNonRoot: true
      initContainers:
        - name: init-grafana
          image: busybox:1.35
          command: ['sh', '-c', 'chown -R 472:472 /var/lib/grafana']
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          ports:
            - containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secret
                  key: admin-password
            - name: GF_INSTALL_PLUGINS
              value: "grafana-clock-panel,grafana-simple-json-datasource,alexanderzobnin-zabbix-app,grafana-piechart-panel"
            - name: GF_SERVER_ROOT_URL
              value: "https://grafana.tailtracker.com"
            - name: GF_DATABASE_TYPE
              value: "postgres"
            - name: GF_DATABASE_HOST
              valueFrom:
                secretKeyRef:
                  name: grafana-db-secret
                  key: host
            - name: GF_DATABASE_NAME
              value: "grafana"
            - name: GF_DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-db-secret
                  key: username
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-db-secret
                  key: password
            - name: GF_DATABASE_SSL_MODE
              value: "require"
            - name: GF_SMTP_ENABLED
              value: "true"
            - name: GF_SMTP_HOST
              value: "smtp.sendgrid.net:587"
            - name: GF_SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-smtp-secret
                  key: username
            - name: GF_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-smtp-secret
                  key: password
            - name: GF_SMTP_FROM_ADDRESS
              value: "alerts@tailtracker.com"
            - name: GF_SMTP_FROM_NAME
              value: "TailTracker Monitoring"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
            - name: GF_AUTH_OAUTH_AUTO_LOGIN
              value: "true"
            - name: GF_ALERTING_ENABLED
              value: "true"
            - name: GF_ALERTING_EXECUTE_ALERTS
              value: "true"
            - name: GF_METRICS_ENABLED
              value: "true"
            - name: GF_FEATURE_TOGGLES_ENABLE
              value: "ngalert"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-config
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-config
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
  selector:
    app: grafana

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: gp2

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana
  labels:
    app: grafana
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana
  labels:
    app: grafana
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: monitoring